// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApp.Infrastructure;

namespace WebApp.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220105074046_tett")]
    partial class tett
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.13");

            modelBuilder.Entity("WebApp.Domain.Models.CompoundTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Direction")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("TargetId")
                        .HasColumnType("int");

                    b.Property<double>("Total")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.ToTable("CompoundTransactions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("CompoundTransaction");
                });

            modelBuilder.Entity("WebApp.Domain.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("OnPO")
                        .HasColumnType("double");

                    b.Property<double>("OnSO")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("WebApp.Domain.Models.Gateway", b =>
                {
                    b.Property<int>("GatewayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Attribute")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Type")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("GatewayId");

                    b.ToTable("Gateways");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Gateway");
                });

            modelBuilder.Entity("WebApp.Domain.Models.Hub", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Hubs");
                });

            modelBuilder.Entity("WebApp.Domain.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("HubId")
                        .HasColumnType("int");

                    b.Property<int>("OnHand")
                        .HasColumnType("int");

                    b.Property<int>("OnPO")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HubId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("WebApp.Domain.Models.ItemEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CompoundTransactionId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Qty")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompoundTransactionId");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemEntrys");
                });

            modelBuilder.Entity("WebApp.Domain.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Direction")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("GatewayId")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("double");

                    b.Property<int>("TargetId")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("GatewayId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("WebApp.Domain.Models.CompundTransactions.PO", b =>
                {
                    b.HasBaseType("WebApp.Domain.Models.CompoundTransaction");

                    b.HasDiscriminator().HasValue("PO");
                });

            modelBuilder.Entity("WebApp.Domain.Models.Gateways.HubGateway", b =>
                {
                    b.HasBaseType("WebApp.Domain.Models.Gateway");

                    b.Property<int>("HubId")
                        .HasColumnType("int");

                    b.HasIndex("HubId");

                    b.HasDiscriminator().HasValue("HubGateway");
                });

            modelBuilder.Entity("WebApp.Domain.Models.Gateways.HubOnHandGateway", b =>
                {
                    b.HasBaseType("WebApp.Domain.Models.Gateways.HubGateway");

                    b.HasDiscriminator().HasValue("HubOnHandGateway");
                });

            modelBuilder.Entity("WebApp.Domain.Models.Gateways.HubOnPoGateway", b =>
                {
                    b.HasBaseType("WebApp.Domain.Models.Gateways.HubGateway");

                    b.HasDiscriminator().HasValue("HubOnPoGateway");
                });

            modelBuilder.Entity("WebApp.Domain.Models.Gateways.HubOnSOGateway", b =>
                {
                    b.HasBaseType("WebApp.Domain.Models.Gateways.HubGateway");

                    b.HasDiscriminator().HasValue("HubOnSOGateway");
                });

            modelBuilder.Entity("WebApp.Domain.Models.Item", b =>
                {
                    b.HasOne("WebApp.Domain.Models.Hub", "Hub")
                        .WithMany("Items")
                        .HasForeignKey("HubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hub");
                });

            modelBuilder.Entity("WebApp.Domain.Models.ItemEntry", b =>
                {
                    b.HasOne("WebApp.Domain.Models.CompoundTransaction", null)
                        .WithMany("Entries")
                        .HasForeignKey("CompoundTransactionId");

                    b.HasOne("WebApp.Domain.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("WebApp.Domain.Models.Transaction", b =>
                {
                    b.HasOne("WebApp.Domain.Models.Gateway", "Gateway")
                        .WithMany()
                        .HasForeignKey("GatewayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gateway");
                });

            modelBuilder.Entity("WebApp.Domain.Models.Gateways.HubGateway", b =>
                {
                    b.HasOne("WebApp.Domain.Models.Hub", "Hub")
                        .WithMany()
                        .HasForeignKey("HubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hub");
                });

            modelBuilder.Entity("WebApp.Domain.Models.CompoundTransaction", b =>
                {
                    b.Navigation("Entries");
                });

            modelBuilder.Entity("WebApp.Domain.Models.Hub", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
